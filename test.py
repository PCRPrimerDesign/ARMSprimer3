ww = 'tcactaggaactatgtctctaaatttggttgctttcagagaatctctcctctgtctccctattgcaggtctctaaaaatagcaaagactggtaaagagctttatacttttaccagatggtatctcactgaacccccaaacagacctgtaacattnttaggagggttattacccatttgataaaaggaagaaattaggaaaggctaatcaacttgctcaacacatccnataccaacagacctggaatttgaaactaagacaaaatatgttatcncactctagacttgccttcggcagtgatggtactgataaaaatagacaagacaaaaaaaaaaaaagaataaatgttatcacactggtgctaaaaaggactacttgacaattactgttctcttgaaggaaatgccccattatttagccaggagacctaacatgttctagccagaagaaattctcagaatttctgaaaggttacttcaaggacaaaatacctgtattcCTCGCctgtccagggatctgctcttacagattagaagtagtcctattagcccagaggcgatgtctntcatgatgtccacgtcactgtagtatggtcttgttaagcactgggcatcattttctgtgggttcatcaaactctaagatgttccacttataagtataggtttcccctggttgaactgctctgatcatggtgttgttcctgcctgaaagaaaatatattcaaaattgttttcatttgcaaagttatttcatgntaataaataaataaataagctttcgctggaaccaattaatattgcaaaaggaattcttttatttttattttttttaaattatactttaagttctagggtacatgtgcacaacntgcaggtttgttacatatgtatacatgtgtcatgttggtgtgctgcacccattaacttgtcattaacattaggtatatctcctaatgctanccctccccccgccccccaccccccccccncgacaggccccn'
mm = 'tcactaggaactatgtctctaaatttggttgctttcagagaatctctcctctgtctccctattgcaggtctctaaaaatagcaaagactggtaaagagctttatacttttaccagatggtatctcactgaacccccaaacagacctgtaacattnttaggagggttattacccatttgataaaaggaagaaattaggaaaggctaatcaacttgctcaacacatccnataccaacagacctggaatttgaaactaagacaaaatatgttatcncactctagacttgccttcggcagtgatggtactgataaaaatagacaagacaaaaaaaaaaaaagaataaatgttatcacactggtgctaaaaaggactacttgacaattactgttctcttgaaggaaatgccccattatttagccaggagacctaacatgttctagccagaagaaattctcagaatttctgaaaggttacttcaaggacaaaatacctgtattcCTTGCctgtccagggatctgctcttacagattagaagtagtcctattagcccagaggcgatgtctntcatgatgtccacgtcactgtagtatggtcttgttaagcactgggcatcattttctgtgggttcatcaaactctaagatgttccacttataagtataggtttcccctggttgaactgctctgatcatggtgttgttcctgcctgaaagaaaatatattcaaaattgttttcatttgcaaagttatttcatgntaataaataaataaataagctttcgctggaaccaattaatattgcaaaaggaattcttttatttttattttttttaaattatactttaagttctagggtacatgtgcacaacntgcaggtttgttacatatgtatacatgtgtcatgttggtgtgctgcacccattaacttgtcattaacattaggtatatctcctaatgctanccctccccccgccccccaccccccccccncgacaggccccn'

w = bioCommons.PcrTemplate(ww)
m = bioCommons.PcrTemplate(mm)

centerPos = int(len(m.template)/2)
wtAllele = w.template[centerPos]
wtAlleleCom = complement(wtAllele)
mutAllele = m.template[centerPos]
mutAlleleCom = complement(mutAllele)

secondMutDistance = 2
ajacentLeftAllele = w.template[centerPos - secondMutDistance]
ajacentLeftAlleleCom = complement(ajacentLeftAllele)
ajacentRightAllele = w.template[centerPos + secondMutDistance]
ajacentRightAlleleCom = complement(ajacentRightAllele)

wtTemForceLeftMissmatch = armsTable(wtAllele, mutAlleleCom, ajacentLeftAlleleCom)
wtTemForceLeftMissmatchCom = complement(wtTemForceLeftMissmatch)
ScreenOutput.add(f"Wild template (force left) = {wtAllele}, {mutAlleleCom}, {ajacentLeftAlleleCom} -> {wtTemForceLeftMissmatch} => {wtTemForceLeftMissmatch}")

mutTemForceLeftMissmatch = armsTable(mutAllele, wtAlleleCom, ajacentLeftAlleleCom)
mutTemForceLeftMissmatchCom = complement(mutTemForceLeftMissmatch)
ScreenOutput.add(f"Mutation template (force left) = {mutAllele}, {wtAlleleCom}, {ajacentLeftAlleleCom} -> {mutTemForceLeftMissmatch} => {mutTemForceLeftMissmatch}")

wtTemForceRightMissmatch = armsTable(wtAlleleCom, mutAllele, ajacentRightAllele)
wtTemForceRightMissmatchCom = complement(wtTemForceRightMissmatch)
ScreenOutput.add(f"Wild template (force right) = {wtAlleleCom}, {mutAllele}, {ajacentRightAllele} -> {wtTemForceRightMissmatch} => {wtTemForceRightMissmatchCom}")

mutTemForceRightMissmatch = armsTable(mutAlleleCom, wtAllele, ajacentRightAllele)
mutTemForceRightMissmatchCom = complement(mutTemForceRightMissmatch)
ScreenOutput.add(f"Mutation template (force right) = {mutAlleleCom}, {wtAllele}, {ajacentRightAllele} -> {mutTemForceRightMissmatch} => {mutTemForceRightMissmatchCom}")


wt = w.mute(centerPos - secondMutDistance, wtTemForceLeftMissmatch).mute(centerPos + secondMutDistance, wtTemForceRightMissmatchCom)
mut = m.mute(centerPos - secondMutDistance, wtTemForceLeftMissmatch).mute(centerPos + secondMutDistance, mutTemForceRightMissmatchCom)
